{"links": {"self": {"href": "data/repositories/osrf/robocup3ds/pullrequests/6/comments/8155236.json"}, "html": {"href": "#!/osrf/robocup3ds/pull-requests/6/_/diff#comment-8155236"}}, "parent": {"id": 8154710, "links": {"self": {"href": "data/repositories/osrf/robocup3ds/pullrequests/6/comments/8154710.json"}, "html": {"href": "#!/osrf/robocup3ds/pull-requests/6/_/diff#comment-8154710"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 6, "links": {"self": {"href": "data/repositories/osrf/robocup3ds/pullrequests/6.json"}, "html": {"href": "#!/osrf/robocup3ds/pull-requests/6"}}, "title": "TCP server"}, "content": {"raw": "Thanks for the quick update. A few considerations before you start making a new diagram:\n\n* Shouldn't the `Gazebo World Model` be outside of the plugin, and the plugin has a pointer to it? (instead of a dashed box)\n\n* Still related to my previous comment, it would be nice to portray the clients from outside connecting to the Server like in Carlos's Server description.\n\n* If `Agent` and `Team` are members of `GameState`, shouldn't they be outside of it and connected with a square arrow? Alternatively, `AgentPercept` and `AgentActions` could be boxes inside `Agent`. Does this make sense?\n\n* The relation between the `Server`, the `Perceptor` and the `AgentPercept` is not very clear to me. `Perceptor` will separately fill the `GameState::Agent::AgentPercept` and send it to the clients via the `Server`, right? Since the `Agent` has the `SocketID`, wouldn't it make more sense to follow this path: `Perceptor -> GameState::Agent::AgentPercept -> Server::Send` ? And where do the outgoing s-expressions get created?\n\n* If the `Effector` is responsible for parsing the incoming s-expressions, where does the `SocketParser` go? Wouldn't it be better to keep all s-expression outside of the `Effector` class so if maybe in the future we change the type of communication we can keep the same interface with the `Effector`? Or did I get something wrong here?\n\n* Maybe this is something which you've already decided with @caguero , but I'm not sure why it is the `Effector`'s responsibility to keep track of `SocketIDs`, since these will should be needed by the `Perceptor` as well, right? Maybe I'm misunderstanding the role of the `SocketParser`.", "markup": "markdown", "html": "<p>Thanks for the quick update. A few considerations before you start making a new diagram:</p>\n<ul>\n<li>\n<p>Shouldn't the <code>Gazebo World Model</code> be outside of the plugin, and the plugin has a pointer to it? (instead of a dashed box)</p>\n</li>\n<li>\n<p>Still related to my previous comment, it would be nice to portray the clients from outside connecting to the Server like in Carlos's Server description.</p>\n</li>\n<li>\n<p>If <code>Agent</code> and <code>Team</code> are members of <code>GameState</code>, shouldn't they be outside of it and connected with a square arrow? Alternatively, <code>AgentPercept</code> and <code>AgentActions</code> could be boxes inside <code>Agent</code>. Does this make sense?</p>\n</li>\n<li>\n<p>The relation between the <code>Server</code>, the <code>Perceptor</code> and the <code>AgentPercept</code> is not very clear to me. <code>Perceptor</code> will separately fill the <code>GameState::Agent::AgentPercept</code> and send it to the clients via the <code>Server</code>, right? Since the <code>Agent</code> has the <code>SocketID</code>, wouldn't it make more sense to follow this path: <code>Perceptor -&gt; GameState::Agent::AgentPercept -&gt; Server::Send</code> ? And where do the outgoing s-expressions get created?</p>\n</li>\n<li>\n<p>If the <code>Effector</code> is responsible for parsing the incoming s-expressions, where does the <code>SocketParser</code> go? Wouldn't it be better to keep all s-expression outside of the <code>Effector</code> class so if maybe in the future we change the type of communication we can keep the same interface with the <code>Effector</code>? Or did I get something wrong here?</p>\n</li>\n<li>\n<p>Maybe this is something which you've already decided with @caguero , but I'm not sure why it is the <code>Effector</code>'s responsibility to keep track of <code>SocketIDs</code>, since these will should be needed by the <code>Perceptor</code> as well, right? Maybe I'm misunderstanding the role of the <code>SocketParser</code>.</p>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2015-07-10T00:03:04.848106+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2015-07-10T00:03:04.863599+00:00", "type": "pullrequest_comment", "id": 8155236}