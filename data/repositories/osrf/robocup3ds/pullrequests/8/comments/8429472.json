{"links": {"self": {"href": "data/repositories/osrf/robocup3ds/pullrequests/8/comments/8429472.json"}, "html": {"href": "#!/osrf/robocup3ds/pull-requests/8/_/diff#comment-8429472"}}, "parent": {"id": 8428985, "links": {"self": {"href": "data/repositories/osrf/robocup3ds/pullrequests/8/comments/8428985.json"}, "html": {"href": "#!/osrf/robocup3ds/pull-requests/8/_/diff#comment-8428985"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 8, "links": {"self": {"href": "data/repositories/osrf/robocup3ds/pullrequests/8.json"}, "html": {"href": "#!/osrf/robocup3ds/pull-requests/8"}}, "title": "Nima_actionparser"}, "content": {"raw": "To clarify, here is the datastructure that should store the messages and socket:\n```\n#!c++\n\npublic: std::map<int, std::string> socketIDMessageMap;\n\n```\nThe OnConnection() function should create the following key-value entry in socketIDMessageMap:\n<socketID, \"init\">\n\nSimilarly, the OnDisconnection() function should check for socketId entry in socketIDMessageMap and set it like so:\n<socketID, \"delete\">\nWhen Parse() is called, it should do the following:\n\n```\n#!c++\nrecv(_socket, buffer);\nstd::string message(buffer);\n<enable mutex>\nif (socketIDMessageMap.find(socketId) != socketIDMessageMap.end())\n  socketIDMessageMap[socketId] = message;\n<disable mutex>\n```\nIt is very important that the insertion operation into socketIDMessageMap is atomic since both the server thread and main thread are accessing this data structure. I dont mind if we still have a update method that is called. effector->Update(), when called from the robocupplugin, will do the following:\n\n0. Clear the agentsToAdd and agentsToRemove vectors.\n1. Iterate through all the key-value entries in socketIDMessageMap\n2. For each entry, call ParseMessage() on the message string, find the corresponding agent (by iterating through all agents in gameState) that matches the socketId, and update agent.action. \n3. If there are any init messages, push an initMsg object onto the agentsToAdd vector and call gameState->AddAgent(), and set agent.socketId\n4. If there are any disconnections (entries with the value \"delete\"), push an initMsg object onto the agentsToRemove vector and call gameState->RemoveAgent(). Also, delete the entry from socketIDMessageMap.\n", "markup": "markdown", "html": "<p>To clarify, here is the datastructure that should store the messages and socket:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">socketIDMessageMap</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>The OnConnection() function should create the following key-value entry in socketIDMessageMap:\n&lt;socketID, \"init\"&gt;</p>\n<p>Similarly, the OnDisconnection() function should check for socketId entry in socketIDMessageMap and set it like so:\n&lt;socketID, \"delete\"&gt;\nWhen Parse() is called, it should do the following:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"n\">_socket</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">message</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"o\">&lt;</span><span class=\"n\">enable</span> <span class=\"n\">mutex</span><span class=\"o\">&gt;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">socketIDMessageMap</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">socketId</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">socketIDMessageMap</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n  <span class=\"n\">socketIDMessageMap</span><span class=\"p\">[</span><span class=\"n\">socketId</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">;</span>\n<span class=\"o\">&lt;</span><span class=\"n\">disable</span> <span class=\"n\">mutex</span><span class=\"o\">&gt;</span>\n</pre></div>\n\n\n<p>It is very important that the insertion operation into socketIDMessageMap is atomic since both the server thread and main thread are accessing this data structure. I dont mind if we still have a update method that is called. effector-&gt;Update(), when called from the robocupplugin, will do the following:</p>\n<ol>\n<li>Clear the agentsToAdd and agentsToRemove vectors.</li>\n<li>Iterate through all the key-value entries in socketIDMessageMap</li>\n<li>For each entry, call ParseMessage() on the message string, find the corresponding agent (by iterating through all agents in gameState) that matches the socketId, and update agent.action. </li>\n<li>If there are any init messages, push an initMsg object onto the agentsToAdd vector and call gameState-&gt;AddAgent(), and set agent.socketId</li>\n<li>If there are any disconnections (entries with the value \"delete\"), push an initMsg object onto the agentsToRemove vector and call gameState-&gt;RemoveAgent(). Also, delete the entry from socketIDMessageMap.</li>\n</ol>", "type": "rendered"}, "created_on": "2015-07-22T01:16:30.155925+00:00", "user": {"display_name": "jasonzliang NA", "uuid": "{663c75f1-dde2-425c-aa25-68ad2f4eb5ec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B663c75f1-dde2-425c-aa25-68ad2f4eb5ec%7D"}, "html": {"href": "https://bitbucket.org/%7B663c75f1-dde2-425c-aa25-68ad2f4eb5ec%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:4f6d7230-9817-448e-8b0d-98cb3dd0821c/5b9c099e-6241-49a1-ba1d-fabcca24c6c3/128"}}, "nickname": "jasonzliang", "type": "user", "account_id": "557058:4f6d7230-9817-448e-8b0d-98cb3dd0821c"}, "updated_on": "2015-07-22T01:37:51.183714+00:00", "type": "pullrequest_comment", "id": 8429472}