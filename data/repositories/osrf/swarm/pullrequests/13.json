{"rendered": {"description": {"raw": "* Add an IMU sensor to each robot that returns linear velocity, angular velocity and orientation with respect a reference position (initial position). I've used a combination of an IMU sensor and reading the linear velocity directly from the model.\r\n* Add a compass sensor to each robot that returns the bearing with respect the true North. Gazebo angles work in the range of `PI`, `-PI` but a typical compass seems to work in `0`, `2*PI`. I've used the yaw angle of the robot, translated and normalized it.\r\n* Worlds updated with the new `<imu>` sensors for each model.\r\n* `example/TeamControllerPlugin.cc` updated for using the new `Imu()` and `Bearing()` calls.\r\n\r\nYou can try any of the world files and check the console output to make sure that the IMU/bearing values make sense.\r\n\r\n[Here's the tutorial](#!/osrf/swarm/wiki/Tutorial_6-IMU_bearing_sensor) (need pull request #14).\r\n\r\n**Note:** Using my laptop and launching Gazebo with any of the `*_36.world` was causing Gazebo to freeze. I believe is due to the massive number of `std::cout`s in the `TeamControllerPlugin::OnDataReceived` callback. Maybe we should comment this code to prevent hangs when we have a large team and lots of communication.", "markup": "markdown", "html": "<ul>\n<li>Add an IMU sensor to each robot that returns linear velocity, angular velocity and orientation with respect a reference position (initial position). I've used a combination of an IMU sensor and reading the linear velocity directly from the model.</li>\n<li>Add a compass sensor to each robot that returns the bearing with respect the true North. Gazebo angles work in the range of <code>PI</code>, <code>-PI</code> but a typical compass seems to work in <code>0</code>, <code>2*PI</code>. I've used the yaw angle of the robot, translated and normalized it.</li>\n<li>Worlds updated with the new <code>&lt;imu&gt;</code> sensors for each model.</li>\n<li><code>example/TeamControllerPlugin.cc</code> updated for using the new <code>Imu()</code> and <code>Bearing()</code> calls.</li>\n</ul>\n<p>You can try any of the world files and check the console output to make sure that the IMU/bearing values make sense.</p>\n<p><a data-is-external-link=\"true\" href=\"#!/osrf/swarm/wiki/Tutorial_6-IMU_bearing_sensor\" rel=\"nofollow\">Here's the tutorial</a> (need <a href=\"#!/osrf/swarm/pull-requests/14/imu-tutorial\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #14</a>).</p>\n<p><strong>Note:</strong> Using my laptop and launching Gazebo with any of the <code>*_36.world</code> was causing Gazebo to freeze. I believe is due to the massive number of <code>std::cout</code>s in the <code>TeamControllerPlugin::OnDataReceived</code> callback. Maybe we should comment this code to prevent hangs when we have a large team and lots of communication.</p>", "type": "rendered"}, "title": {"raw": "Imu and compass sensors", "markup": "markdown", "html": "<p>Imu and compass sensors</p>", "type": "rendered"}}, "type": "pullrequest", "description": "* Add an IMU sensor to each robot that returns linear velocity, angular velocity and orientation with respect a reference position (initial position). I've used a combination of an IMU sensor and reading the linear velocity directly from the model.\r\n* Add a compass sensor to each robot that returns the bearing with respect the true North. Gazebo angles work in the range of `PI`, `-PI` but a typical compass seems to work in `0`, `2*PI`. I've used the yaw angle of the robot, translated and normalized it.\r\n* Worlds updated with the new `<imu>` sensors for each model.\r\n* `example/TeamControllerPlugin.cc` updated for using the new `Imu()` and `Bearing()` calls.\r\n\r\nYou can try any of the world files and check the console output to make sure that the IMU/bearing values make sense.\r\n\r\n[Here's the tutorial](#!/osrf/swarm/wiki/Tutorial_6-IMU_bearing_sensor) (need pull request #14).\r\n\r\n**Note:** Using my laptop and launching Gazebo with any of the `*_36.world` was causing Gazebo to freeze. I believe is due to the massive number of `std::cout`s in the `TeamControllerPlugin::OnDataReceived` callback. Maybe we should comment this code to prevent hangs when we have a large team and lots of communication.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/13/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/diffstat/osrf/swarm:8d6189f86d82%0D2612b0400091?from_pullrequest_id=13"}, "commits": {"href": "data/repositories/osrf/swarm/pullrequests/13/commits.json"}, "self": {"href": "data/repositories/osrf/swarm/pullrequests/13.json"}, "comments": {"href": "data/repositories/osrf/swarm/pullrequests/13/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/13/merge"}, "html": {"href": "#!/osrf/swarm/pull-requests/13"}, "activity": {"href": "data/repositories/osrf/swarm/pullrequests/13/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/diff/osrf/swarm:8d6189f86d82%0D2612b0400091?from_pullrequest_id=13"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/13/approve"}, "statuses": {"href": "data/repositories/osrf/swarm/pullrequests/13/statuses_page=1.json"}}, "title": "Imu and compass sensors", "close_source_branch": true, "reviewers": [], "id": 13, "destination": {"commit": {"hash": "2612b0400091", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/2612b0400091.json"}, "html": {"href": "#!/osrf/swarm/commits/2612b0400091"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/swarm.json"}, "html": {"href": "#!/osrf/swarm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{06a294a4-4254-4f63-b7b3-e5768577fb96}ts=default"}}, "type": "repository", "name": "swarm", "full_name": "osrf/swarm", "uuid": "{06a294a4-4254-4f63-b7b3-e5768577fb96}"}, "branch": {"name": "default"}}, "created_on": "2015-08-16T05:08:39.647250+00:00", "summary": {"raw": "* Add an IMU sensor to each robot that returns linear velocity, angular velocity and orientation with respect a reference position (initial position). I've used a combination of an IMU sensor and reading the linear velocity directly from the model.\r\n* Add a compass sensor to each robot that returns the bearing with respect the true North. Gazebo angles work in the range of `PI`, `-PI` but a typical compass seems to work in `0`, `2*PI`. I've used the yaw angle of the robot, translated and normalized it.\r\n* Worlds updated with the new `<imu>` sensors for each model.\r\n* `example/TeamControllerPlugin.cc` updated for using the new `Imu()` and `Bearing()` calls.\r\n\r\nYou can try any of the world files and check the console output to make sure that the IMU/bearing values make sense.\r\n\r\n[Here's the tutorial](#!/osrf/swarm/wiki/Tutorial_6-IMU_bearing_sensor) (need pull request #14).\r\n\r\n**Note:** Using my laptop and launching Gazebo with any of the `*_36.world` was causing Gazebo to freeze. I believe is due to the massive number of `std::cout`s in the `TeamControllerPlugin::OnDataReceived` callback. Maybe we should comment this code to prevent hangs when we have a large team and lots of communication.", "markup": "markdown", "html": "<ul>\n<li>Add an IMU sensor to each robot that returns linear velocity, angular velocity and orientation with respect a reference position (initial position). I've used a combination of an IMU sensor and reading the linear velocity directly from the model.</li>\n<li>Add a compass sensor to each robot that returns the bearing with respect the true North. Gazebo angles work in the range of <code>PI</code>, <code>-PI</code> but a typical compass seems to work in <code>0</code>, <code>2*PI</code>. I've used the yaw angle of the robot, translated and normalized it.</li>\n<li>Worlds updated with the new <code>&lt;imu&gt;</code> sensors for each model.</li>\n<li><code>example/TeamControllerPlugin.cc</code> updated for using the new <code>Imu()</code> and <code>Bearing()</code> calls.</li>\n</ul>\n<p>You can try any of the world files and check the console output to make sure that the IMU/bearing values make sense.</p>\n<p><a data-is-external-link=\"true\" href=\"#!/osrf/swarm/wiki/Tutorial_6-IMU_bearing_sensor\" rel=\"nofollow\">Here's the tutorial</a> (need <a href=\"#!/osrf/swarm/pull-requests/14/imu-tutorial\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #14</a>).</p>\n<p><strong>Note:</strong> Using my laptop and launching Gazebo with any of the <code>*_36.world</code> was causing Gazebo to freeze. I believe is due to the massive number of <code>std::cout</code>s in the <code>TeamControllerPlugin::OnDataReceived</code> callback. Maybe we should comment this code to prevent hangs when we have a large team and lots of communication.</p>", "type": "rendered"}, "source": {"commit": {"hash": "3b6b87ac6e76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/3b6b87ac6e76.json"}, "html": {"href": "#!/osrf/swarm/commits/3b6b87ac6e76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/swarm.json"}, "html": {"href": "#!/osrf/swarm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{06a294a4-4254-4f63-b7b3-e5768577fb96}ts=default"}}, "type": "repository", "name": "swarm", "full_name": "osrf/swarm", "uuid": "{06a294a4-4254-4f63-b7b3-e5768577fb96}"}, "branch": {"name": "imu"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-08-18T20:56:55.009286+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2015-08-20T21:32:25.356566+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2015-08-20T21:33:25.813875+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "8d6189f86d82", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/8d6189f86d82.json"}, "html": {"href": "#!/osrf/swarm/commits/8d6189f86d82"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}