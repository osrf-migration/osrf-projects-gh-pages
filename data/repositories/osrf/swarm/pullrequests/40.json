{"rendered": {"description": {"raw": "Adds the communication information to the log file. In each simulation cycle,\r\n\r\nThe broker plugin adds to the log:\r\n\r\n* A visibility map: `NxN` matrix, where `N` is the number of robots in the swarm. In each element of the matrix we store the visibility status during this simulation cycle (`VISIBLE`, `OUTAGE`, `OBSTACLE` or `DISTANCE`). Note that `VISIBLE` doesn't mean that a potential message between the pair of robots will be delivered, just means that there's visibility between the two robots. The message might be discarded because of the message drop probability. \r\n\r\n* All the incoming messages: A collection of messages with source address, destination address, destination port and payload size. If the destination is `broadcast` we only save in the log one single message with `destination address = broadcast`. `multicast` behaves in a similar way.\r\n\r\nIn a nutshell, the broker logs a connectivity snapshot, as well as the list of all messages sent by robots.\r\n\r\nEach robot plugin adds to the log:\r\n\r\n* The list of messages received. For each message, the following fields are logged: source address, original destination address (broadcast, multicast, or a specific address for unicast), destination port, size, and whether the message will be delivered or not. At this point the only reason for not delivering the message should be because we have decided to drop the message.\r\n\r\nFollow the same instructions described in pull request #37 for testing.\r\n\r\n*Note: this PR is built atop pull request #37, which should be merged first. Here is a better [diff](#!/osrf/swarm/branches/compare/logging_part2%0Dlogging_part1#diff)*.", "markup": "markdown", "html": "<p>Adds the communication information to the log file. In each simulation cycle,</p>\n<p>The broker plugin adds to the log:</p>\n<ul>\n<li>\n<p>A visibility map: <code>NxN</code> matrix, where <code>N</code> is the number of robots in the swarm. In each element of the matrix we store the visibility status during this simulation cycle (<code>VISIBLE</code>, <code>OUTAGE</code>, <code>OBSTACLE</code> or <code>DISTANCE</code>). Note that <code>VISIBLE</code> doesn't mean that a potential message between the pair of robots will be delivered, just means that there's visibility between the two robots. The message might be discarded because of the message drop probability. </p>\n</li>\n<li>\n<p>All the incoming messages: A collection of messages with source address, destination address, destination port and payload size. If the destination is <code>broadcast</code> we only save in the log one single message with <code>destination address = broadcast</code>. <code>multicast</code> behaves in a similar way.</p>\n</li>\n</ul>\n<p>In a nutshell, the broker logs a connectivity snapshot, as well as the list of all messages sent by robots.</p>\n<p>Each robot plugin adds to the log:</p>\n<ul>\n<li>The list of messages received. For each message, the following fields are logged: source address, original destination address (broadcast, multicast, or a specific address for unicast), destination port, size, and whether the message will be delivered or not. At this point the only reason for not delivering the message should be because we have decided to drop the message.</li>\n</ul>\n<p>Follow the same instructions described in <a href=\"#!/osrf/swarm/pull-requests/37/logging-part-1\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #37</a> for testing.</p>\n<p><em>Note: this PR is built atop <a href=\"#!/osrf/swarm/pull-requests/37/logging-part-1\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #37</a>, which should be merged first. Here is a better <a data-is-external-link=\"true\" href=\"#!/osrf/swarm/branches/compare/logging_part2%0Dlogging_part1#diff\" rel=\"nofollow\">diff</a></em>.</p>", "type": "rendered"}, "title": {"raw": "Logging - part2", "markup": "markdown", "html": "<p>Logging - part2</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Adds the communication information to the log file. In each simulation cycle,\r\n\r\nThe broker plugin adds to the log:\r\n\r\n* A visibility map: `NxN` matrix, where `N` is the number of robots in the swarm. In each element of the matrix we store the visibility status during this simulation cycle (`VISIBLE`, `OUTAGE`, `OBSTACLE` or `DISTANCE`). Note that `VISIBLE` doesn't mean that a potential message between the pair of robots will be delivered, just means that there's visibility between the two robots. The message might be discarded because of the message drop probability. \r\n\r\n* All the incoming messages: A collection of messages with source address, destination address, destination port and payload size. If the destination is `broadcast` we only save in the log one single message with `destination address = broadcast`. `multicast` behaves in a similar way.\r\n\r\nIn a nutshell, the broker logs a connectivity snapshot, as well as the list of all messages sent by robots.\r\n\r\nEach robot plugin adds to the log:\r\n\r\n* The list of messages received. For each message, the following fields are logged: source address, original destination address (broadcast, multicast, or a specific address for unicast), destination port, size, and whether the message will be delivered or not. At this point the only reason for not delivering the message should be because we have decided to drop the message.\r\n\r\nFollow the same instructions described in pull request #37 for testing.\r\n\r\n*Note: this PR is built atop pull request #37, which should be merged first. Here is a better [diff](#!/osrf/swarm/branches/compare/logging_part2%0Dlogging_part1#diff)*.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/40/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/diffstat/osrf/swarm:3428ff7c9705%0Dd5073e53205f?from_pullrequest_id=40"}, "commits": {"href": "data/repositories/osrf/swarm/pullrequests/40/commits.json"}, "self": {"href": "data/repositories/osrf/swarm/pullrequests/40.json"}, "comments": {"href": "data/repositories/osrf/swarm/pullrequests/40/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/40/merge"}, "html": {"href": "#!/osrf/swarm/pull-requests/40"}, "activity": {"href": "data/repositories/osrf/swarm/pullrequests/40/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/diff/osrf/swarm:3428ff7c9705%0Dd5073e53205f?from_pullrequest_id=40"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/40/approve"}, "statuses": {"href": "data/repositories/osrf/swarm/pullrequests/40/statuses_page=1.json"}}, "title": "Logging - part2", "close_source_branch": true, "reviewers": [], "id": 40, "destination": {"commit": {"hash": "d5073e53205f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/d5073e53205f.json"}, "html": {"href": "#!/osrf/swarm/commits/d5073e53205f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/swarm.json"}, "html": {"href": "#!/osrf/swarm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{06a294a4-4254-4f63-b7b3-e5768577fb96}ts=default"}}, "type": "repository", "name": "swarm", "full_name": "osrf/swarm", "uuid": "{06a294a4-4254-4f63-b7b3-e5768577fb96}"}, "branch": {"name": "default"}}, "created_on": "2015-09-30T23:51:51.122064+00:00", "summary": {"raw": "Adds the communication information to the log file. In each simulation cycle,\r\n\r\nThe broker plugin adds to the log:\r\n\r\n* A visibility map: `NxN` matrix, where `N` is the number of robots in the swarm. In each element of the matrix we store the visibility status during this simulation cycle (`VISIBLE`, `OUTAGE`, `OBSTACLE` or `DISTANCE`). Note that `VISIBLE` doesn't mean that a potential message between the pair of robots will be delivered, just means that there's visibility between the two robots. The message might be discarded because of the message drop probability. \r\n\r\n* All the incoming messages: A collection of messages with source address, destination address, destination port and payload size. If the destination is `broadcast` we only save in the log one single message with `destination address = broadcast`. `multicast` behaves in a similar way.\r\n\r\nIn a nutshell, the broker logs a connectivity snapshot, as well as the list of all messages sent by robots.\r\n\r\nEach robot plugin adds to the log:\r\n\r\n* The list of messages received. For each message, the following fields are logged: source address, original destination address (broadcast, multicast, or a specific address for unicast), destination port, size, and whether the message will be delivered or not. At this point the only reason for not delivering the message should be because we have decided to drop the message.\r\n\r\nFollow the same instructions described in pull request #37 for testing.\r\n\r\n*Note: this PR is built atop pull request #37, which should be merged first. Here is a better [diff](#!/osrf/swarm/branches/compare/logging_part2%0Dlogging_part1#diff)*.", "markup": "markdown", "html": "<p>Adds the communication information to the log file. In each simulation cycle,</p>\n<p>The broker plugin adds to the log:</p>\n<ul>\n<li>\n<p>A visibility map: <code>NxN</code> matrix, where <code>N</code> is the number of robots in the swarm. In each element of the matrix we store the visibility status during this simulation cycle (<code>VISIBLE</code>, <code>OUTAGE</code>, <code>OBSTACLE</code> or <code>DISTANCE</code>). Note that <code>VISIBLE</code> doesn't mean that a potential message between the pair of robots will be delivered, just means that there's visibility between the two robots. The message might be discarded because of the message drop probability. </p>\n</li>\n<li>\n<p>All the incoming messages: A collection of messages with source address, destination address, destination port and payload size. If the destination is <code>broadcast</code> we only save in the log one single message with <code>destination address = broadcast</code>. <code>multicast</code> behaves in a similar way.</p>\n</li>\n</ul>\n<p>In a nutshell, the broker logs a connectivity snapshot, as well as the list of all messages sent by robots.</p>\n<p>Each robot plugin adds to the log:</p>\n<ul>\n<li>The list of messages received. For each message, the following fields are logged: source address, original destination address (broadcast, multicast, or a specific address for unicast), destination port, size, and whether the message will be delivered or not. At this point the only reason for not delivering the message should be because we have decided to drop the message.</li>\n</ul>\n<p>Follow the same instructions described in <a href=\"#!/osrf/swarm/pull-requests/37/logging-part-1\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #37</a> for testing.</p>\n<p><em>Note: this PR is built atop <a href=\"#!/osrf/swarm/pull-requests/37/logging-part-1\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #37</a>, which should be merged first. Here is a better <a data-is-external-link=\"true\" href=\"#!/osrf/swarm/branches/compare/logging_part2%0Dlogging_part1#diff\" rel=\"nofollow\">diff</a></em>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "61068916ef3c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/61068916ef3c.json"}, "html": {"href": "#!/osrf/swarm/commits/61068916ef3c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/swarm.json"}, "html": {"href": "#!/osrf/swarm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{06a294a4-4254-4f63-b7b3-e5768577fb96}ts=default"}}, "type": "repository", "name": "swarm", "full_name": "osrf/swarm", "uuid": "{06a294a4-4254-4f63-b7b3-e5768577fb96}"}, "branch": {"name": "logging_part2"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-10-02T22:38:02.226269+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2015-10-05T16:42:46.320577+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "3428ff7c9705", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/3428ff7c9705.json"}, "html": {"href": "#!/osrf/swarm/commits/3428ff7c9705"}}}, "closed_by": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}