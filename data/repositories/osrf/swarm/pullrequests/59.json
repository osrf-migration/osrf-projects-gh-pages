{"rendered": {"description": {"raw": "Invoke the protobuf compiler to produce Python bindings, in addition to the current C++ bindings.  Install the resulting bindings.\r\n\r\nNote that we have to also do Python generation for the Gazebo messages, because Gazebo doesn't do that (but Gazebo is kind enough to install the `.proto` files and point us to their location, which makes this step easy to do).\r\n\r\nTo test that this is working, start python and:\r\n\r\n    import swarm\r\n    l = swarm.log_entry_pb2.LogEntry()\r\n\r\nFrom there you can instantiate and manipulate any of the swarm or gazebo protobuf messages.\r\n\r\nNext I'll use this Python support to write a log-parsing / -plotting tool.\r\n\r\n**Edit**: I added an example tool that uses the Python message API to parse a swarm log, compute some simple statistics, and output a `.csv` file.", "markup": "markdown", "html": "<p>Invoke the protobuf compiler to produce Python bindings, in addition to the current C++ bindings.  Install the resulting bindings.</p>\n<p>Note that we have to also do Python generation for the Gazebo messages, because Gazebo doesn't do that (but Gazebo is kind enough to install the <code>.proto</code> files and point us to their location, which makes this step easy to do).</p>\n<p>To test that this is working, start python and:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">swarm</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">swarm</span><span class=\"o\">.</span><span class=\"n\">log_entry_pb2</span><span class=\"o\">.</span><span class=\"n\">LogEntry</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>From there you can instantiate and manipulate any of the swarm or gazebo protobuf messages.</p>\n<p>Next I'll use this Python support to write a log-parsing / -plotting tool.</p>\n<p><strong>Edit</strong>: I added an example tool that uses the Python message API to parse a swarm log, compute some simple statistics, and output a <code>.csv</code> file.</p>", "type": "rendered"}, "title": {"raw": "Add Python message generation", "markup": "markdown", "html": "<p>Add Python message generation</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Invoke the protobuf compiler to produce Python bindings, in addition to the current C++ bindings.  Install the resulting bindings.\r\n\r\nNote that we have to also do Python generation for the Gazebo messages, because Gazebo doesn't do that (but Gazebo is kind enough to install the `.proto` files and point us to their location, which makes this step easy to do).\r\n\r\nTo test that this is working, start python and:\r\n\r\n    import swarm\r\n    l = swarm.log_entry_pb2.LogEntry()\r\n\r\nFrom there you can instantiate and manipulate any of the swarm or gazebo protobuf messages.\r\n\r\nNext I'll use this Python support to write a log-parsing / -plotting tool.\r\n\r\n**Edit**: I added an example tool that uses the Python message API to parse a swarm log, compute some simple statistics, and output a `.csv` file.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/59/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/diffstat/osrf/swarm:fd99756478a2%0D8bf55b7fdccf?from_pullrequest_id=59"}, "commits": {"href": "data/repositories/osrf/swarm/pullrequests/59/commits.json"}, "self": {"href": "data/repositories/osrf/swarm/pullrequests/59.json"}, "comments": {"href": "data/repositories/osrf/swarm/pullrequests/59/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/59/merge"}, "html": {"href": "#!/osrf/swarm/pull-requests/59"}, "activity": {"href": "data/repositories/osrf/swarm/pullrequests/59/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/diff/osrf/swarm:fd99756478a2%0D8bf55b7fdccf?from_pullrequest_id=59"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/swarm/pullrequests/59/approve"}, "statuses": {"href": "data/repositories/osrf/swarm/pullrequests/59/statuses_page=1.json"}}, "title": "Add Python message generation", "close_source_branch": true, "reviewers": [], "id": 59, "destination": {"commit": {"hash": "8bf55b7fdccf", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/8bf55b7fdccf.json"}, "html": {"href": "#!/osrf/swarm/commits/8bf55b7fdccf"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/swarm.json"}, "html": {"href": "#!/osrf/swarm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{06a294a4-4254-4f63-b7b3-e5768577fb96}ts=default"}}, "type": "repository", "name": "swarm", "full_name": "osrf/swarm", "uuid": "{06a294a4-4254-4f63-b7b3-e5768577fb96}"}, "branch": {"name": "default"}}, "created_on": "2015-10-22T00:43:30.011891+00:00", "summary": {"raw": "Invoke the protobuf compiler to produce Python bindings, in addition to the current C++ bindings.  Install the resulting bindings.\r\n\r\nNote that we have to also do Python generation for the Gazebo messages, because Gazebo doesn't do that (but Gazebo is kind enough to install the `.proto` files and point us to their location, which makes this step easy to do).\r\n\r\nTo test that this is working, start python and:\r\n\r\n    import swarm\r\n    l = swarm.log_entry_pb2.LogEntry()\r\n\r\nFrom there you can instantiate and manipulate any of the swarm or gazebo protobuf messages.\r\n\r\nNext I'll use this Python support to write a log-parsing / -plotting tool.\r\n\r\n**Edit**: I added an example tool that uses the Python message API to parse a swarm log, compute some simple statistics, and output a `.csv` file.", "markup": "markdown", "html": "<p>Invoke the protobuf compiler to produce Python bindings, in addition to the current C++ bindings.  Install the resulting bindings.</p>\n<p>Note that we have to also do Python generation for the Gazebo messages, because Gazebo doesn't do that (but Gazebo is kind enough to install the <code>.proto</code> files and point us to their location, which makes this step easy to do).</p>\n<p>To test that this is working, start python and:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">swarm</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">swarm</span><span class=\"o\">.</span><span class=\"n\">log_entry_pb2</span><span class=\"o\">.</span><span class=\"n\">LogEntry</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>From there you can instantiate and manipulate any of the swarm or gazebo protobuf messages.</p>\n<p>Next I'll use this Python support to write a log-parsing / -plotting tool.</p>\n<p><strong>Edit</strong>: I added an example tool that uses the Python message API to parse a swarm log, compute some simple statistics, and output a <code>.csv</code> file.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f2362a232c41", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/f2362a232c41.json"}, "html": {"href": "#!/osrf/swarm/commits/f2362a232c41"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/swarm.json"}, "html": {"href": "#!/osrf/swarm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{06a294a4-4254-4f63-b7b3-e5768577fb96}ts=default"}}, "type": "repository", "name": "swarm", "full_name": "osrf/swarm", "uuid": "{06a294a4-4254-4f63-b7b3-e5768577fb96}"}, "branch": {"name": "add_python_pb"}}, "comment_count": 9, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-10-22T23:26:31.317881+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2015-10-22T23:47:43.087806+00:00", "type": "participant", "approved": false, "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}}], "reason": "", "updated_on": "2015-10-22T23:52:29.512896+00:00", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "merge_commit": {"hash": "fd99756478a2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/swarm/commit/fd99756478a2.json"}, "html": {"href": "#!/osrf/swarm/commits/fd99756478a2"}}}, "closed_by": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}}